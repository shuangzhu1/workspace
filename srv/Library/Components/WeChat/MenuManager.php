<?php/** * Created by PhpStorm. * User: wgwang * Date: 14-4-8 * Time: 下午3:05 */namespace Components\WeChat;use Components\WeiBo\FansClient;use Models\WeChat\CustomerMenus;use Phalcon\Cache\BackendInterface;use Phalcon\Mvc\User\Plugin;class MenuManager extends Plugin{    const TYPE_CLICK = 'CLICK';    const TYPE_VIEW = 'VIEW';    const TYPE_TOP_BAR = 'TOP_BAR';    /**     * @var BackendInterface     */    private $cache = null;    /**     * @var MenuManager     */    private static $instance = null;    private $appId = '';    private $appSecret = '';    private function __construct()    {        $this->cache = $this->di->get('memcached');    }    public static function instance()    {        if (!self::$instance instanceof MenuManager) {            self::$instance = new self();        }//         self::$instance->appId = $appId;//         self::$instance->appSecret = $appSecret;        return self::$instance;    }    public function getMenus($customer, $platform)    {        $topMenus = CustomerMenus::find(array("customer_id='{$customer}' AND pid='0' AND platform='{$platform}'", 'order' => 'sort desc'))->toArray();        $data = array();        if (count($topMenus) > 0) {            foreach ($topMenus as $item) {                if ($item['type'] == self::TYPE_CLICK) {                    if ($item['message_type'] != ResourceManager::MESSAGE_TYPE_TEXT) {                        $item['message'] = ResourceManager::instance()->getMessage($item['message_type'], $item['target_value']);                    }                } else if ($item['type'] == self::TYPE_TOP_BAR) {                    $subMenus = CustomerMenus::find(array("customer_id='{$customer}' AND pid='{$item['id']}'", 'sort_by' => 'sort'))->toArray();                    if (count($subMenus)) {                        $subData = array();                        foreach ($subMenus as $subItem) {                            if ($subItem['type'] == self::TYPE_CLICK) {                                if ($subItem['message_type'] != ResourceManager::MESSAGE_TYPE_TEXT) {                                    $subItem['message'] = ResourceManager::instance()->getMessage($subItem['message_type'], $subItem['target_value']);                                }                            }                            $subData[] = $subItem;                        }                        $item['subs'] = $subData;                        unset($subData);                    }                    unset($subMenus);                }                $data[] = $item;            }            unset($topMenus);        }        return $data;    }    /**     * @param $customer     * @return bool     */    public function syncToWeChat($customer, $appId, $appSeret)    {        //generates request data        $topMenus = CustomerMenus::find(array("customer_id='{$customer}' AND pid='0' AND platform='" . MessageManager::PLATFORM_TYPE_WEIXIN . "'", 'order' => 'sort desc'))->toArray();        $data = array();        if (count($topMenus) > 0) {            foreach ($topMenus as $item) {                $itemData = array();                if ($item['type'] == self::TYPE_TOP_BAR) {                    $itemData = array(                        'name' => $item['name'],                    );                    $subMenus = CustomerMenus::find(array("customer_id='{$customer}' AND pid='{$item['id']}'", 'sort_by' => 'sort'))->toArray();                    $subData = array();                    if (count($subMenus)) {                        foreach ($subMenus as $subItem) {                            $subItemData = array(                                'name' => $subItem['name'],                            );                            if ($subItem['type'] == self::TYPE_CLICK) {                                $subItemData['key'] = is_null($subItem['key']) ? '111111111111' : $subItem['key'];                                $subItemData['type'] = strtolower(self::TYPE_CLICK);                            } else {                                $subItemData['url'] = is_null($subItem['target_value']) ? 'http://www.estt.com.cn' : $subItem['target_value'];                                $subItemData['type'] = strtolower(self::TYPE_VIEW);                            }                            $subData[] = $subItemData;                        }                    }                    $itemData['sub_button'] = $subData;                    unset($subData);                    unset($subMenus);                } else {                    $itemData = array(                        'name' => $item['name']                    );                    if ($item['type'] == self::TYPE_CLICK) {                        $itemData['key'] = is_null($item['key']) ? '22222222222222' : $item['key'];                        $itemData['type'] = strtolower(self::TYPE_CLICK);                    } else {                        $itemData['url'] = is_null($item['target_value']) ? 'http://www.estt.com.cn' : $item['target_value'];                        $itemData['type'] = strtolower(self::TYPE_VIEW);                    }                }                $data[] = $itemData;            }            unset($topMenus);        }        $data = array('button' => $data);        //request to delete old menus        $request = RequestFactory::create('MenuDelete', $customer, $appId, $appSeret);        $result = $request->run();        if (isset($result['errcode']) && $result['errcode'] > 0) {            $this->di->get('wechatLogger')->log('delete menu failed: customer ' . $customer . ', respond:' . json_encode($result));            return false;        }        //request to create new menus        $request = RequestFactory::create('MenuCreate', $customer, $appId, $appSeret);        $request->set('menu', $data);        $request = $request->run();        if ($request !== true) {            $this->di->get('wechatLogger')->log('create menu failed: customer ' . $customer . ', respond:' . json_encode($result));            return false;        }        return true;    }    /**     * @param $customer     * @return bool     */    public function syncFromWeChat($customer, $appId, $appSecret)    {        $request = RequestFactory::create("MenuGet", $customer, $appId, $appSecret);        $menus = $request->run();        if ($request->isFailed() || empty($menus) || empty($menus['menu']['button'])) {            return true;        }        $menus = $menus['menu']['button'];        foreach ($menus as $menu) {            $itemData = array(                'name' => $menu['name'],                'customer_id' => $customer,                'platform' => MessageManager::PLATFORM_TYPE_WEIXIN            );            if (isset($menu['type']) && strtolower($menu['type']) == strtolower(self::TYPE_VIEW)) {                $itemData['type'] = self::TYPE_VIEW;                $itemData['target_value'] = $menu['url'];            } else if (isset($menu['type']) && strtolower($menu['type']) == strtolower(self::TYPE_CLICK) && empty($menu['sub_button'])) {                $itemData['type'] = self::TYPE_CLICK;                $itemData['key'] = $menu['key'];                $itemData['message_type'] = '';            } else {                $itemData['type'] = self::TYPE_TOP_BAR;            }            $itemData['sort'] = 0;            $itemData['created'] = time();            $itemData['pid'] = 0;            $menuItem = new CustomerMenus();            if ($menuItem->save($itemData)) {                $itemData = $menuItem->toArray();                $itemData['subs'] = [];                if (count($menu['sub_button']) > 0) {                    foreach ($menu['sub_button'] as $subItem) {                        $subItemData = array(                            'customer_id' => $customer,                            'name' => $subItem['name'],                            'platform' => MessageManager::PLATFORM_TYPE_WEIXIN                        );                        if (strtolower($subItem['type']) == strtolower(self::TYPE_VIEW)) {                            $subItemData['type'] = self::TYPE_VIEW;                            $subItemData['target_value'] = $subItem['url'];                        } else {                            $subItemData['type'] = self::TYPE_CLICK;                            $subItemData['key'] = $subItem['key'];                        }                        $subItemData['sort'] = 0;                        $subItemData['created'] = time();                        $subItemData['pid'] = $menuItem->id;                        $subMenuItem = new CustomerMenus();                        if (!$subMenuItem->save($subItemData)) {                            $message = '';                            foreach ($subMenuItem->getMessages() as $m) {                                $message .= (string)$m;                            }                            $this->di->get('wechatLogger')->info('子菜单入库保存失败:' . $message);                            continue;                        }                    }                } else {                    $message = '';                    foreach ($menuItem->getMessages() as $m) {                        $message .= (string)$m;                    }                    $this->di->get('wechatLogger')->info('菜单入库失败:' . $message);                    continue;                }            }        }        return true;    }    /**     * @param $customer     * @return bool     */    public function syncToWeiBo($customer, $appId, $appSecret, $token)    {        //generates request data        $topMenus = CustomerMenus::find(array("customer_id='{$customer}' AND pid='0' AND platform='" . MessageManager::PLATFORM_TYPE_WEIBO . "'", 'sort_by' => 'sort'))->toArray();        $data = array();        if (count($topMenus) > 0) {            foreach ($topMenus as $item) {                $itemData = array();                if ($item['type'] == self::TYPE_TOP_BAR) {                    $itemData = array(                        'name' => $item['name'],                    );                    $subMenus = CustomerMenus::find(array("customer_id='{$customer}' AND pid='{$item['id']}'", 'sort_by' => 'sort'))->toArray();                    $subData = array();                    if (count($subMenus)) {                        foreach ($subMenus as $subItem) {                            $subItemData = array(                                'name' => $subItem['name'],                            );                            if ($subItem['type'] == self::TYPE_CLICK) {                                $subItemData['key'] = is_null($subItem['key']) ? '111111111111' : $subItem['key'];                                $subItemData['type'] = strtolower(self::TYPE_CLICK);                            } else {                                $subItemData['url'] = is_null($subItem['target_value']) ? 'http://www.estt.com.cn' : $subItem['target_value'];                                $subItemData['type'] = strtolower(self::TYPE_VIEW);                            }                            $subData[] = $subItemData;                        }                    }                    $itemData['sub_button'] = $subData;                    unset($subData);                    unset($subMenus);                } else {                    $itemData = array(                        'name' => $item['name']                    );                    if ($item['type'] == self::TYPE_CLICK) {                        $itemData['key'] = is_null($item['key']) ? '22222222222222' : $item['key'];                        $itemData['type'] = strtolower(self::TYPE_CLICK);                    } else {                        $itemData['url'] = is_null($item['target_value']) ? 'http://www.estt.com.cn' : $item['target_value'];                        $itemData['type'] = strtolower(self::TYPE_VIEW);                    }                }                $data[] = $itemData;            }            unset($topMenus);        }        $data = array('button' => $data);        $this->di->get('weiboLogger')->info("weibo menu:" . urlencode(json_encode($data)));        //request to delete old menus        $client = new FansClient($appId, $appSecret, $token);        $result = $client->del_menus();        if (!$result) {            $this->di->get('weiboLogger')->log('delete menu failed: customer ' . $customer . ', error:' . $client->getErrorMessage());            return false;        }        //request to create new menus        $request = $client->set_menus($data);        if ($request !== true) {            $this->di->get('weiboLogger')->log('create menu failed: customer ' . $customer . ', error:' . $client->getErrorMessage());            return false;        }        return true;    }    /**     * @param $customer     * @return bool     */    public function syncFromWeiBo($customer, $appId, $appSecret, $token)    {        $client = new FansClient($appId, $appSecret, $token);        $menus = $client->get_menus();        if ($client->isFailed() || empty($menus) || empty($menus['menu']['button'])) {            return true;        }        foreach ($menus['menu']['button'] as $menu) {            $itemData = array(                'name' => $menu['name'],                'customer_id' => $customer,                'platform' => MessageManager::PLATFORM_TYPE_WEIBO            );            if (strtolower($menu['type']) == strtolower(self::TYPE_VIEW)) {                $itemData['type'] = self::TYPE_VIEW;                $itemData['target_value'] = $menu['url'];            } else if (strtolower($menu['type']) == strtolower(self::TYPE_CLICK) && empty($menu['sub_button'])) {                $itemData['type'] = self::TYPE_CLICK;                $itemData['key'] = $menu['key'];                $itemData['message_type'] = '';            } else {                $itemData['type'] = self::TYPE_TOP_BAR;            }            $itemData['sort'] = 0;            $itemData['created'] = time();            $itemData['pid'] = 0;            $menuItem = new CustomerMenus();            if ($menuItem->save($itemData)) {                $itemData = $menuItem->toArray();                $itemData['subs'] = [];                if (count($menu['sub_button']) > 0) {                    foreach ($menu['sub_button'] as $subItem) {                        $subItemData = array(                            'customer_id' => $customer,                            'name' => $subItem['name'],                            'platform' => MessageManager::PLATFORM_TYPE_WEIBO                        );                        if (strtolower($subItem['type']) == strtolower(self::TYPE_VIEW)) {                            $subItemData['type'] = self::TYPE_VIEW;                            $subItemData['target_value'] = $subItem['url'];                        } else {                            $subItemData['type'] = self::TYPE_CLICK;                            $subItemData['key'] = $subItem['key'];                        }                        $subItemData['sort'] = 0;                        $subItemData['created'] = time();                        $subItemData['pid'] = $menuItem->id;                        $subMenuItem = new CustomerMenus();                        if (!$subMenuItem->save($subItemData)) {                            $message = '';                            foreach ($subMenuItem->getMessages() as $m) {                                $message .= (string)$m;                            }                            $this->di->get('weiboLogger')->info('子菜单入库保存失败:' . $message);                            continue;                        }                    }                } else {                    $message = '';                    foreach ($menuItem->getMessages() as $m) {                        $message .= (string)$m;                    }                    $this->di->get('weiboLogger')->info('菜单入库失败:' . $message);                    continue;                }            }        }        return true;    }} 